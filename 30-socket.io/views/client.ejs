<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>socket.io 채팅</title>
    <!-- CDN -->
    <!-- 서버가 실행 중이지 않아도 클라이언트 라이브러리를 사용 할 수 있음. -->
    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"
        integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO"
        crossorigin="anonymous"></script>
    <!-- Socket.IO 서버가 제공하는 클라이언트 라이브러리 -->
    <script src="/socket.io/socket.io.js"></script>

    <style>
        /*실습 2) 채팅창 UI 만들기*/
        .chat-list {
            background-color: skyblue;
            height: 500px;
            padding: 10px;
            overflow-y: auto;
        }

        .chat-list div {
            margin-top: 3px;
        }

        .chat-list div div {
            display: inline-block;
            padding: 3px;
        }

        .my-chat {
            text-align: right;
        }

        .my-chat div {
            background-color: yellow;
        }

        .other-chat div {
            background-color: white;
        }

        /*실습 3) 채팅창 입장 안내 문구*/
        .notice {
            text-align: center;
            color: #333;
            font-size: 12px;
        }

        .d-none {
            display: none;
        }


    </style>
</head>

<body>
    <h1>My Chat</h1>
    <!-- 실습 1) 각 버튼 누를때마다 서버로 메세지 보내기 -->
    <!-- <button onclick="sayHello()">Hello</button>
    <button onclick="sayStudy()">Study</button>
    <button onclick="sayBye()">Bye</button>
    <p id="from-server"></p> -->

    <!-- 실습 3-2) socket.id -> nickname, 닉네임 입력 폼 -->
    <div class="entry-box">
        <input type="text" id="nickname" placeholder="닉네임" autofocus onkeypress="if(window.event.keyCode==13){join()}">
        <button type="button" onclick="join()">입장</button>
    </div>
    <!-- 참고) keyCode 아는 방법 -->
    <!-- <input type="text" id="myInput"> -->

    <!-- 실습 2) 채팅 UI 만들기 -->
    <main class="chat-box">
        <div class="chat-list">
            <!-- <div class="my-chat">
                <div>user1 : msg1</div>
            </div>
            <div class="other-chat">
                <div>user2 : msg2</div>
            </div> -->
        </div>

        <!-- 메세지 전송 영역 -->
        <select id="nick-list"></select>에게
        <input type="text" id="message" onkeypress="if(window.event.keyCode==13){send()}">
        <button type="button" onclick="send()">전송</button>
    </main>

    <script>
        // 참고) keyCode 아는 방법
        // document.getElementById('myInput').addEventListener('keydown', (e) => {
        //     console.log('key down >>>', e.keyCode);
        // })


        let socket = io(); // 소켓 사용을 위한 객체 생성
        let myNick;   // 내 닉네임(실습 3-2-2)

        socket.on('connect', () => {    // 소켓 연결 완료
            console.log('클라이언트 연결 완료 ::', socket.id);
            // console.log(socket);
        })


        // 실습 1)
        // function sayHello(){
        //     socket.emit('hello', {who : 'client', msg : 'hello'})   //socket.emit(이벤트명, 보낼 데이터)
        // }

        // function sayStudy(){
        //     socket.emit('study', {who : 'client', msg : 'study'})
        // }

        // function sayBye(){
        //     socket.emit('bye', {who : 'client', msg : 'bye'})
        // }

        // socket.on('hellokr', (data) => {    // 서버와 클라이언트에서 이벤트명을 똑같이 설정해줘야 emit을 하고 받을 수 있음
        //     console.log('data >>>', data);   // {msg: "안녕!!", who: "hello"}
        //     document.querySelector('#from-server').textContent = `${data.who} : ${data.msg}`
        // })

        // socket.on('studykr', (data) => {
        //     console.log('data >>>', data);   
        //     document.querySelector('#from-server').textContent = `${data.who} : ${data.msg}`
        // })

        // socket.on('byekr', (data) => {
        //     console.log('data >>>', data); 
        //     document.querySelector('#from-server').textContent = `${data.who} : ${data.msg}`
        // })


        // 실습 3) 채팅창 입장 안내 문구
        socket.on('notice', (msg) => {
            console.log(msg);
            // insertAdjacentHTML VS innerHTML
            // insertAdjacentHTML(위치, 넣을 데이터) : 삽입할 위치 명시적으로 지정, 특정 위치에 HTML 추가하려면 사용
            //     위치 - beforeend, beforebegin, afterbegin, afterend
            // innerHTML : 요소의 전체 내용을 대체, 요소의 내용을 한번에 대체하거나 가져올 수 있음
            document.querySelector('.chat-list')
                .insertAdjacentHTML('beforeend', `<div class="notice">${msg}</div>`)
        })

        // 실습 3-2) 채팅창 입장 문구 socket.id -> nickname
        function join() {
            socket.emit('setNick', document.querySelector('#nickname').value)
        }

        // 실습 3-2-1) 채팅창 입장 문구 socket.id
        // 닉네임 중복 -> alert 띄우기
        socket.on('error', (data) => {
            alert(data)
        })

        // 실습 3-2-2)
        socket.on('entrySuccess', (nick) => {
            myNick = nick   // 내 닉네임 저장
            console.log('myNick >', myNick);
            document.querySelector('#nickname').disabled = true    // 인풋창 비할성화
            document.querySelector('.entry-box > button').disabled = true   // 버튼 비활성화
            document.querySelector('.chat-box').classList.remove('d-none')   // 채팅창 보이기

        })

        // 실습 3-2-3)
        // 유저 목록 업데이트 (select 박스의 option태그 개수 변경)
        socket.on('updateNicks', (nickObj) => {
            console.log('클라이언트 nickObj >>', nickObj);
            let options = `<option value="all">전체</option>`

            // TODO : nickObj를 반복 돌아서 option 태그에 추가
            // option 태그의 value 속성값은 socket.id, option 태그의 컨텐츠는 nick
            for (let socketId in nickObj) {
                // 추가 실습) 나에게 DM 시 메세지 2번 찍히는 이유(option 태그에서 본인을 제외해야함)
                if (socketId !== socket.id) {
                    options += `<option value="${socketId}">${nickObj[socketId]}</option>`;
                }

            }

            document.querySelector('#nick-list').innerHTML = options
        })

        // 실습 4) 채팅창 메세지 전송
        function send() {
            // 'send' 이벤트 전송 {닉네임, 입력창 내용}
            const data = {
                // 전체 : all, 그 외 다른 닉네임 : socket.id
                // 위의 options에서 innerHTML 할 때 value 값 정해줬음
                dm: document.querySelector('#nick-list').value,
                myNick,   // 내 닉네임
                msg: document.querySelector('#message').value,   // 메세지 내용

            }

            console.log('data >>>', data);
            socket.emit('send', data)
            document.querySelector('#message').value = ''    // input 초기화
        }


        // 실습 4-2) 채팅창 메세지 전송, newMessage 이벤트를 받아서 {닉네임, 입력창 내용}
        // 내가 보낸 메세지는 오른쪽, 다른 사람 메세지는 왼쪽
        socket.on('newMessage', (data) => {
            console.log('client newMessage///////////', data);

            // 내가 생성해야할 채팅 구조
            // <div class="my-chat">
            //     <div>user1 : msg1</div>
            // </div>
            // <div class="other-chat">
            //     <div>user2 : msg2</div>
            // </div> 

            let chatList = document.querySelector('.chat-list')
            let div = document.createElement('div')   // .my-chat or .other-chat
            let divChat = document.createElement('div')   // 가장 안쪽 div - 대화 내용

            if (myNick === data.nick) {
                //내가 보낸 메세지
                div.classList.add('my-chat')
            } else {
                // 다른 사람이 보낸 메세지
                div.classList.add('other-chat')
            }

            // 실습 5) DM 기능 추가하기
            if(data.dm){
                div.classList.add('secret-chat')
                divChat.textContent = data.dm;
            }

            // 실습 4-2
            divChat.textContent += `${data.nick} : ${data.msg}`
            div.append(divChat)
            chatList.append(div)


            // 메세지가 많아져서 스크롤이 생기더라도 하단에 고정
            chatList.scrollTop = chatList.scrollHeight
        })
    </script>
</body>

</html>