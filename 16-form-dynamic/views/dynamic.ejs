<!DOCTYPE html>
<html lang="ko">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>document</title>
    <!-- jQuery CDN (ajax 간편하게 사용하고자 불러옴) -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"
        integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

    <!-- axios CDN -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>

<body>
    <h1>
        <%= title %>
    </h1>

    <form name="register">
        <label for="name">이름</label>
        <input type="text" id="name" name="name"><br>
        <span>성별</span>
        <input type="radio" name="gender" id="male" value="남자">
        <label for="male">남자</label>
        <input type="radio" name="gender" id="female" value="여자">
        <label for="female">여자</label><br>

        <button type="button" onclick="ajaxGet()">ajax get 방식 요청</button>
        <button type="button" onclick="ajaxPost()">ajax post 방식 요청</button>
        <button type="button" onclick="axiosGet()">axios get 방식 요청</button>
        <button type="button" onclick="axiosPost()">axios post 방식 요청</button>
        <button type="button" onclick="fetchGet()">fetch get 방식 요청</button>
        <button type="button" onclick="fetchPost()">fetch post 방식 요청</button>
    </form>

    <div class="result">

    </div>

    <script>
        const resultBox = document.querySelector('.result')

        // ajax GET 방식
        function ajaxGet() {
            console.log('click ajax get');

            // form 선택
            const form = document.forms['register']

            // form 요소 값 추출
            console.dir(form);    // tree 구조로 출력, js 객체의 모든 속성을 솩인 가능
            console.dir(form.name)
            console.dir(form.name.value)    // 이름 input에 작성된 문자열
            console.dir(form.gender)
            console.dir(form.gender.value)    // 성별 input이 선택된 값

            // 서버로 보낼 데이터 양식 생성
            const data = {
                name: form.name.value,
                gender: form.gender.value
            }

            // ajax 비동기 통신(GET 방식, 서버의 app.js 파일로 유저가 브라우저에 입력한 값 보내기)
            $.ajax({
                type: 'GET',
                url: '/ajax',   // 이 요청을 받을 서버측 경로
                data,     // data:data 와 같은 의미, 객체에서 키와 값이 이름이 같으면 사용 가능
                success: (data) => {
                    console.log(data);     // {name: 'joij', gender: '남자'}
                    resultBox.textContent = `GET /ajax 요청에 대한 응답 완료! ${data.name}님은 ${data.gender}입니다`
                    resultBox.style.color = 'blue'
                }
            })
        }

        // ajax POST 방식
        function ajaxPost() {
            console.log('click ajax post');

            // form 선택
            const form = document.forms['register']

            // 서버로 보낼 데이터 양식 생성
            const data = {
                name: form.name.value,
                gender: form.gender.value
            }

            // ajax 비동기 통신(POST 방식, 서버의 app.js 파일로 유저가 브라우저에 입력한 값 보내기)
            $.ajax({
                type: 'POST',
                url: '/ajax',   // 이 요청을 받을 서버측 경로
                data,     // data:data 와 같은 의미, 객체에서 키와 값이 이름이 같으면 사용 가능
                success: (data) => {
                    console.log(data);     // {name: 'joij', gender: '남자'}
                    resultBox.textContent = `POST /ajax 요청에 대한 응답 완료! ${data.name}님은 ${data.gender}입니다`
                    resultBox.style.color = 'red'
                }
            })
        }

        // axios GET 방식
        function axiosGet() {
            console.log('click axios get');

            // form 선택
            const form = document.forms['register']

            // 서버로 보낼 데이터 양식 생성
            const data = {
                name: form.name.value,
                gender: form.gender.value
            }

            // axios 비동기 통신(GET 방식, 서버의 app.js 파일로 유저가 브라우저에 입력한 값 보내기)
            axios({
                method: 'get',

                // i) params 키를 이용하지 않는다면 요청 url에 쿼리스트링을 작성
                url: `/axios?name=${form.name.value}&gender=${form.gender.value}`,
                // ii) params 키 사용하는 경우
                // url: '/axios',
                // params: data,
            }).then((res) => {
                console.log(res);    // 서버의 응답 결과를 부가적인 정보와 함께 출력
                console.log(res.data);    // {name: 'yiu', gender: '여자'}
                // console.log(res.status);    // HTTP Status code (상태코드)
                // console.log(res.statusText);    
                // console.log(res.headers);    
                // console.log(res.config);    

                const { name, gender } = res.data;
                resultBox.textContent = `GET /axios 요청에 대한 응답 완료! ${name}님은 ${gender}입니다`
                resultBox.style.color = 'green'
            }).catch((err) => {
                console.error('Error-', err);
                resultBox.textContent = '에러 발생'
            })
        }

        // axios POST 방식
        function axiosPost() {
            console.log('click axios post');

            // form 선택
            const form = document.forms['register']

            // 서버로 보낼 데이터 양식 생성
            const data = {
                name: form.name.value,
                gender: form.gender.value
            }

            // axios 비동기 통신(POST 방식, 서버의 app.js 파일로 유저가 브라우저에 입력한 값 보내기)
            axios({
                method: 'post',

                url: '/axios',
                data,   // GET 요청이 아닌 요청들은 모두 data키에 정보를 실어서 전달
            }).then((res) => {
                console.log(res.data);    // {name: 'yiu', gender: '여자'}
                const { name, gender } = res.data;
                resultBox.textContent = `POST /axios 요청에 대한 응답 완료! ${name}님은 ${gender}입니다`
                resultBox.style.color = 'gold'
            })
        }

        // fetch GET 방식
        function fetchGet() {
            console.log('click fetch get');

            // form 선택
            const form = document.forms['register']
            const urlQuery = `?name=${form.name.value}&gender=${form.gender.value}`

            // fetch() - 디폴트로 GET 방식으로 동작
            // fetch(`fetch${urlQuery}`, {method:'get'})
            fetch(`fetch${urlQuery}`)
                .then((res) => {
                    console.log(res);
                    return res.json();    // res객체로 부터 JSON 포맷의 웅덥울 js obj로 변환
                })
                .then((data) => {
                    console.log(data);
                    const { name, gender } = data;
                    resultBox.textContent = `GET /axios 요청에 대한 응답 완료! ${name}님은 ${gender}입니다`
                    resultBox.style.color = 'limegreen'
                })

        }

        // fetch POST 방식
        function fetchPost() {
            console.log('click fetch post');

            // form 선택
            const form = document.forms['register']

            const data = {
                name: form.name.value,
                gender: form.gender.value
            }

            // fetch() - POST 요청시 headers 옵션을 통해 json 포맷을 사용한다고 알려줘야함
            // -> body에서도 json형식으로 데이터를 바꿔 보내야함
            fetch(`fetch`, {
                method: 'post',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)    // js obj to json
            })
                .then((res) => {
                    console.log(res);
                    return res.json();    // res객체로 부터 JSON 포맷의 웅덥울 js obj로 변환
                })
                .then((data) => {
                    console.log(data);
                    const { name, gender } = data;
                    resultBox.textContent = `GET /axios 요청에 대한 응답 완료! ${name}님은 ${gender}입니다`
                    resultBox.style.color = 'hotpink'
                })
        }
    </script>
</body>

</html>