// chapter 1)
// 변수 선언 : 변수 정의
// 변수 할당 : = 연산자를 이용해 값을 넣음
// 초기화 : 변수에 처음 할당하는 순간

// ### var
//  - 선언 단계와 초기화 할당 단계가 동시에 진행, 초기화에는 undefined 값이 들어감
//  - 중복 선언, 재선언 가능, 예기치 못한 값을 반환할 수 있음
//  - 선언 전에 참조하면 언제나 undefined 반환

// ### let
//  - 중복 선언 불가, 재할당 가능

// ### const
//  - 재선언 불가, 재할당 불가
//  - 초반 선언에 반드시 초기화를 동시에 진행 필수








// chapter2)
// 변수 선언 키워드 #1 - var
var a;  //변수 선언
console.log(a);   // undefined 반환(값을 할당하지 않았음)
a = 2;    //변수 할당
console.log(a);   //변수값 2 반환

var a2 = 4;  // 변수 선언 & 할당
console.log(a2);   //변수값 4 반환
var a2 = 5;   //중복 선언 가능
console.log(a2);   //5

//-------------------------------------------------------
// var 변수 문제점
// 1. 중간의 같은 이름의 변수를 다시 선언해도 기존의 변수에 덮어 씌움
//     - 변수를 선언했다는 거는 분명히 다른 데이터를 넣으려고 한것인데 그것을 기존의 데이터에 덮어 씌우면 문제 발생
// 2. 변수가 {블록 단위}에서 끝나는게 아니라 맘대로 전역으로 돌아다니면서 영향력 행사 
//     -> 의도치않은 문제 발생
// 3. 호이스팅 문제
//     -> 따라서 ES6문법부터는 var 대신 let 사용 권장

// 참고) ES6 - js의 표준 버전 중 하나(js 주요 업데이트)

//-------------------------------------------------------//
// 변수 선언 키워드 #2 - let
let b;  //변수 선언
console.log(b);   // undefined
b = 3;
console.log(b);   // 변수값 3 반환

let b2 = 5;   // 변수 선언 & 할당
console.log(b2);   //5
// let b2 = 6;   error:let은 중복 선언 불가
b2 = 7;    //재할당 가능


// 변수 선언 키워드 #3 - const
//변수 선언과 할당이 동시에(반드시)
//변하지 않는 값을 변수에 저장할때 사용(상수)
// const c;  //선언과 할당을 반드시 동시에
const c = 3;
console.log(c);   //3
// c = 33;  //재할당 불가

//---------------------------------------------------------//

//chapter 4)
// ** 호이스팅
// javascript에서 변수 및 함수선언이 코드의 최상단으로 올려지는 현상
// ->변수와 함수 선언이 실제 코드의 실행 전에 처리 -> 이는 코드를 이해하고 예측하는 데에 혼란을 줄 수 있음

// ex)
// console.log(x);   //undefined
// var x = 10;
// console.log(x);   //10

//실제 js 엔진은 이렇게 해석
// var x;   //변수 선언(호이스팅) - 자기 스스로 바라는 코드를 추가
// console.log(x);   //undefined
// var x = 10;
// console.log(x);   //10

//변수 x가 선언되기 전에 사용되었지만 js 엔진은 선언을 최상단에 올려서 undefined를 출력한후 나중에 변수를 초기화해 값을 할당 
//변수 및 함수는 사용하기 전 반드시 선언하는 것이 좋음

//let, const 는 호이스팅을 줄이고 블록스코프를 제공해 변수의 유효범위를 명확히 함
//----------------------------------------------------------//